<div class="doc-part-box" id="line_about">
  <h2>line{}</h2>
  <p>cavlib的静态对象line,计算一些直线相关的数据.</p>
  <pre class="bg-gray-lt">

    cavlib.line;
    // 两点间距离
    cavlib.line.dist();
    ...

</pre>
  <p>需要注意的是,点的坐标值都是平面直角坐标系里的.这和canvas的坐标系不同,canvas向下和向右坐标值是正值,而平面直角坐标系向上和向右是正值,也就是说,Y坐标的值相反!所以,传入参数时,如果是canvas坐标值,那么Y值要传-Y.</p>
  <canvas id="canv_line_about"></canvas>
</div>

<div class="doc-part-box" id="line_k">
  <h2>getK</h2>
  <p>获取两个点所在直线的斜率.如果与 X 轴平行,返回 0 ,与 Y 轴平行返回 null.</p>
  <p>注意Y坐标值,canvas坐标要传入Y坐标的相反值.</p>
  <pre class="bg-gray-lt">

    line.getK(p1, p2, p2x, p2y)

</pre>
  <ul class="list square">
    <li>p1 : {x:number,y:number} 点1对象{x,y}或点1的x坐标</li>
    <li>p2 : {x:number,y:number} 点2对象{x,y}或点1的y坐标</li>
    <li>p2x : number 点2的x坐标</li>
    <li>p2y : number 点2的y坐标</li>
  </ul>
  <canvas id="canv_line_k"></canvas>
</div>

<div class="doc-part-box" id="line_dist">
  <h2>dist</h2>
  <p>获取两点间距离</p>
  <pre class="bg-gray-lt">

    line.dist(p1, p2, p2x, p2y)

</pre>
  <ul class="list square">
    <li>p1 : {x:number,y:number} 点1对象{x,y}或点1的x坐标</li>
    <li>p2 : {x:number,y:number} 点2对象{x,y}或点1的y坐标</li>
    <li>p2x : number 点2的x坐标</li>
    <li>p2y : number 点2的y坐标</li>
  </ul>
  <canvas id="canv_line_dist"></canvas>
</div>
<script>
  ((win) => {
    let canv = win.cavlib('canv_line_about').style();
    let ctx = canv.ctx;
    ctx.font = '16px serial';
    canv.xyAxis();
    //
    ctx.translate(canv.canvas.width / 2, canv.canvas.height / 2);
    let a = { x: 100, y: 30 };
    canv.pointTag(a.x, a.y, 'orangered');
    canv.pointVH(a.x, a.y,4,'blue');
    canv.pointChar(a.x, a.y, `Canvas: A(${a.x},${a.y})`,135,'black',30);
    canv.pointChar(a.x, a.y, `数学: A(${a.x},-${a.y})`, 240, 'red',60);
  })(window);

  ((win) => {
    let line = win.cavlib.line;
    //
    let canv = win.cavlib('canv_line_k').style();
    let ctx = canv.ctx;
    ctx.font = '16px serial';
    canv.xyAxis();
    //
    ctx.translate(canv.canvas.width / 2, canv.canvas.height / 2);
    let a1 = { x: -120, y: -30 }, a2 = { x: 120, y: -30 };
    let b1 = { x: 130, y: -60 }, b2 = { x: 130, y: 60 };
    let c1 = { x: -90, y: 50 }, c2 = { x: 60, y: -20 };
    canv.line(a1.x, a1.y, a2.x, a2.y, 'red');
    canv.line(b1.x, b1.y, b2.x, b2.y, 'blue');
    canv.line(c1.x, c1.y, c2.x, c2.y, 'green');
    //
    canv.pointChar(a1.x, a1.y, 'k= ' + line.getK(a1.x, -a1.y, a2.x, -a2.y), 90);
    canv.pointChar(b2.x, b2.y, 'k= ' + line.getK(b1.x, -b1.y, b2.x, -b2.y), 180, 'black', 30);
    canv.pointChar(c1.x, c1.y, 'k= ' + line.getK(c1.x, -c1.y, c2.x, -c2.y).toFixed(4), 90);

  })(window);

  ((win) => {
    let line = win.cavlib.line;
    //
    let canv = win.cavlib('canv_line_dist').style();
    let ctx = canv.ctx;
    ctx.font = '16px serial';
    canv.xyAxis();
    //
    let a1 = { x: 20, y: 20 }, a2 = { x: 200, y: 20 };
    let b1 = { x: 50, y: 100 }, b2 = { x: 250, y: 50 };
    let c1 = { x: 20, y: 130 }, c2 = { x: 130, y: 130 };
    let d1 = { x: 30, y: 40 }, d2 = { x: 230, y: 130 };
    canv.line(a1.x, a1.y, a2.x, a2.y, 'red');
    canv.line(b1.x, b1.y, b2.x, b2.y, 'blue');
    canv.line(c1.x, c1.y, c2.x, c2.y, 'green');
    canv.line(d1.x, d1.y, d2.x, d2.y, 'gold');
    //
    canv.pointChar(a2.x, a2.y, 'd= ' + line.dist(a1, a2));
    canv.pointChar(b2.x, b2.y, 'd= ' + line.dist(b1, b2).toFixed(2), 90);
    canv.pointChar(c1.x, c1.y, 'd= ' + line.dist(c1, c2), 315);
    canv.pointChar(d2.x, d2.y, 'd= ' + line.dist(d1, d2).toFixed(2), 270);

  })(window);
</script>