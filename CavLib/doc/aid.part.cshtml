<div class="doc-part-box" id="aid_about">
  <h2>Axis</h2>
  <p>将画布视为直角坐标系时,一些坐标系相关方法.皆为实例方法.</p>
  <pre class="bg-gray-lt">

    this
    // 画坐标系
    this.xyAxis();
    ...

</pre>
</div>

<div class="doc-part-box" id="xyAxis">
  <h2>xyAxis</h2>
  <p>在画布上绘制直角坐标系辅助线.省略所有参数时,坐标轴以画布中心为原点,长度为画布长/高</p>
  <p>指定原点坐标,但不指定X/Y轴长时,坐标轴长度为画布长/高</p>
  <pre class="bg-gray-lt">

    this.xyAxis(style = 0, oX = 0, oY = 0, oXLen = 0, oYLen = 0, oXLen1 = 0, oYLen1 = 0)

</pre>
  <ul class="list square">
    <li>
      style : number 风格
      <ul class="list cir">
        <li>0 : 原点在中心,轴长等于画布长,虚线</li>
        <li>1 : 同0,实线</li>
        <li>2或大于2 : 自定义原点位置和轴长,偶数时虚线,奇数时实线</li>
      </ul>
    </li>
    <li>oX : number 原点x坐标(以画布左上角为(0,0)的坐标)</li>
    <li>oY : number 原点y坐标</li>
    <li>oXLen : number x正轴长度</li>
    <li>oYLen : number y正轴长度</li>
    <li>oXLen1 : number x负轴长度</li>
    <li>oYLen1 : number y负轴长度</li>
  </ul>
  <canvas id="canv_xyAxis"></canvas>
</div>

<div class="doc-part-box" id="lineArrow">
  <h2>lineArrow</h2>
  <p>连接2个或者以上的点,结束时画上箭头.箭头底边与线段最后一段垂直</p>
  <pre class="bg-gray-lt">

    this.lineArrow(points, side = 12, height = 10, fill = true)

</pre>
  <ul class="list square">
    <li>points : Array(number) 点坐标数组: x1,y1,x2,y2,....</li>
    <li>side : number 箭头底边长</li>
    <li>height : number 箭头高</li>
    <li>fill : boolean true(实心)false(空心)</li>
  </ul>
  <canvas id="canv_lineArrow"></canvas>
</div>

<div class="doc-part-box" id="p2Rect">
  <h2>p2Rect</h2>
  <p>根据对角线上2点画出矩形</p>
  <pre class="bg-gray-lt">

    this.p2Rect(x1, y1, x2, y2, style = 0, color = 'black')

</pre>
  <ul class="list square">
    <li>x1 : number 点x坐标</li>
    <li>y1 : number 点x坐标</li>
    <li>x2 : number 对角点x坐标</li>
    <li>y2 : number 对角点y坐标</li>
    <li>style : number 风格: 0偶数时虚线,1实线</li>
    <li>color : string 线条颜色.(strokeStyle)</li>
  </ul>
  <canvas id="canv_p2Rect"></canvas>
</div>

<div class="doc-part-box" id="pointVH">
  <h2>pointVH</h2>
  <p>画坐标系中的一点到x/y轴的垂直和水平连线</p>
  <pre class="bg-gray-lt">

    this.pointVH(x, y, style = 0, color = 'black', oX = 0, oY = 0)

</pre>
  <ul class="list square">
    <li>x : number 点x坐标(在以oX,oY为原点的坐标系)</li>
    <li>y : number 点x坐标</li>
    <li>style : number 风格: 0(原点在中心,虚线),1(同0,实线) 其它:指定原点,偶数虚线奇数实线</li>
    <li>color : string 线条颜色.(strokeStyle)</li>
    <li>oX : number 原点x坐标</li>
    <li>oY : number 原点y坐标</li>
  </ul>
  <canvas id="canv_pointVH"></canvas>
</div>
<div class="doc-part-box" id="pointTag">
  <h2>pointTag</h2>
  <p>标记一个点,用于放大显示</p>
  <pre class="bg-gray-lt">

    this.pointTag(x, y, color = 'black', style = 0, cir = 3)

</pre>
  <ul class="list square">
    <li>x : number 点x坐标</li>
    <li>y : number 点x坐标</li>
    <li>color : string 填充颜色fillStyle</li>
    <li>style : number 风格: 0(圆点),1(正方形)</li>
    <li>cir : number 圆半径/正方形半边长</li>
  </ul>
  <canvas id="canv_pointTag"></canvas>
</div>

<div class="doc-part-box" id="pointChar">
  <h2>pointChar</h2>
  <p>给一个点标记字母</p>
  <pre class="bg-gray-lt">

    this.pointChar(x, y, char, deg = 0, color = 'black', cir = 20)

</pre>
  <ul class="list square">
    <li>x : number 点x坐标</li>
    <li>y : number 点x坐标</li>
    <li>char : string 字母</li>
    <li>deg : number 极角(0~359). 点为圆心,字母标记在圆周的一个点上.X轴正方向为0度,顺时针.</li>
    <li>color : string 填充颜色fillStyle</li>
    <li>cir : number 极径. 字母到点半径.</li>
  </ul>
  <canvas id="canv_pointChar"></canvas>
</div>

<script>
  ((win) => {
    let canv1 = win.cavlib('canv_lineArrow').style();
    canv1.lineArrow([20, 20, 200, 20]);
    canv1.lineArrow([20, 40, 200, 40], 12, 10, false);
    canv1.lineArrow([50, 50, 100, 100, 120, 60]);
    canv1.lineArrow([10, 130, 30, 130, 30, 110, 50, 110]);

    let canv2 = win.cavlib('canv_xyAxis').style();
    canv2.xyAxis();
    canv2.xyAxis(3, 10, 140, 50, 50, 0, 0);
    canv2.xyAxis(4, 220, 120, 50, 30, 20, 20);
    canv2.xyAxis(4,270,30);

  })(window);
  ((win) => {
    let canv = win.cavlib('canv_p2Rect').style();
    let ctx = canv.ctx;
    let x1 = 50, y1 = 40, x2 = 160, y2 = 85;
    let ax = 20, ay = 60, bx = 260, by = 135;
    canv.p2Rect(x1, y1, x2, y2);
    canv.p2Rect(ax, ay, bx, by, 1);
    let parr = [[x1, y1], [x2, y2], [ax, ay], [bx, by]];
    for (var i = 0; i < parr.length; i++) {
      canv.pointTag(parr[i][0], parr[i][1], i, 'blue');
    }

  })(window);

  ((win) => {
    let canv = win.cavlib('canv_pointVH').style();
    let ctx = canv.ctx;
    ctx.font = '16px arial'
    canv.xyAxis();
    //
    ctx.save();
    ctx.translate(canv.canvas.width / 2, canv.canvas.height / 2);
    //
    let points = [[20, 60, 'black', 'A'], [120, -35, 'green', 'B'], [-100, 40, 'blue', 'C']];
    for (var i = 0; i < points.length; i++) {
      let p = points[i];
      canv.pointVH(p[0], p[1], i + 2, p[2]);
      canv.pointTag(p[0], p[1], p[2]);
      canv.pointChar(p[0], p[1], p[3], p[0] > 0 ? 0 : 180);
    }
  })(window);
  ((win) => {
    let canv = win.cavlib('canv_pointTag').style();
    let ctx = canv.ctx;
    let ax = 20, ay = 60, bx = 120, by = 35;
    canv.xyAxis();
    canv.pointTag(ax, ay);
    canv.pointTag(ax + 20, ay + 20, 'green', 0, 4);
    canv.pointTag(bx, by, 'red');
    canv.pointTag(bx + 130, by + 20, 'blue', 1, 5);
  })(window);

  ((win) => {
    let canv = win.cavlib('canv_pointChar').style();
    let ctx = canv.ctx;
    ctx.font = '18px serial';
    let ax = 30, ay = 60, bx = 220, by = 45;
    canv.xyAxis();
    canv.pointTag(ax, ay);
    canv.pointChar(ax, ay, 'A');
    canv.pointTag(ax + 20, ay + 30);
    canv.pointChar(ax + 20, ay + 30, 'A1', 135, 'green');
    canv.pointTag(bx, by, 1, 2);
    canv.pointChar(bx, by, 'B', 90, 'red', 30);
  })(window);
</script>